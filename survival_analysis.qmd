---
title: "A worked basic example of a survival analysis in R"
author: "Anshu Uppal"
date: last-modified
format:
        html:
                code-fold: true
                toc: true
                toc-location: left  # Place TOC on the left side
                toc-depth: 5        # Include headers up to level 3 (###)
                toc-title: "On this page" # Custom title for the TOC
                smooth-scroll: true # Enable smooth scrolling
                embed-resources: true # Make the html file self contained
reference-location: margin
citation-location: margin
---
```{css}
/* set DT table fontsizes */
th { font-size: 11px; } /* header font */
td { font-size: 11px; } /* cell font */
```
# Background
I used the `rotterdam` dataset from the `survival` package, which includes 2982 primary breast cancers patients whose records were included in the Rotterdam tumor bank. 

This dataset records two events: disease relapse and death. Follow-up time is provided for each, with the origin being the time of the primary surgery.

In the article from which this data stems, the authors restricted their dataset to the 1546 patients who had node-positive disease ("Since the validation dataset comprised only node-positive patients and nodal status is an important prognostic factor, we omitted the node-negative patients to create the derivation dataset"). I decided to also restrict the dataset to only node-positive patients.

See:  
Royston, P., Altman, D.G. External validation of a Cox prognostic model: principles and methods. BMC Med Res Methodol 13, 33 (2013). <https://doi.org/10.1186/1471-2288-13-33>

## Prognostic factors

**Quoted paragraph from the article:**  
"Candidate prognostic variables in the breast cancer datasets were age at primary surgery (age, years), menopausal status (meno, 0 = premenopausal, 1 = postmenopausal), tumour size (size), tumour grade (grade), number of positive lymph nodes (nodes), progesterone receptors (pgr, fmol/l), oestrogen receptors (er, fmol/l), hormonal treatment (hormon, 0 = no, 1 = yes), and chemotherapy (chemo). Tumour size (mm) was not available as a continuous variable in the Rotterdam dataset, therefore a standard coding was used; the base category was â‰¤ 20 mm and two dummy variables were used, namely 20 to 50 mm (sized1) and > 50 mm (sized2). *We excluded grade, since it was measured according to a different protocol in the two datasets, and chemo, since all patients in the validation dataset received chemotherapy.*"

```{r}
#| context: setup
#| message: false

# install.packages("pacman")
pacman::p_load(
        here,
        tidyverse,
        survival,
        survminer,
        ggsurvfit,
        janitor,
        DT,
        flextable,
        patchwork # easily combine plots
)

# Custom package with useful function for summarising dataframe
# pak::pak("UEP-HUG/UEPtools")

# Load in the rotterdam dataset from the survival package
rotterdam <- survival::rotterdam |> 
        # filter out node-negative patients
        filter(nodes > 0) # as "nodal status is an important prognostic factor, we omitted the node-negative patients to create the derivation dataset"

# Add in the variable description
rotterdam_variables <- tribble(
        ~name, ~value,
        "pid", "patient identifier", 
        "year", "year of surgery", 
        "age", "age at surgery", 
        "meno", "menopausal status (0= premenopausal, 1= postmenopausal)", 
        "size", "tumor size, a factor with levels <=20, 20-50, >50", 
        "grade", "differentiation grade", 
        "nodes", "number of positive lymph nodes", 
        "pgr", "progesterone receptors (fmol/l)", 
        "er", "estrogen receptors (fmol/l)", 
        "hormon", "hormonal treatment (0=no, 1=yes)", 
        "chemo", "chemotherapy", 
        "rtime", "days to relapse or last follow-up", 
        "recur", "0= no relapse, 1= relapse", 
        "dtime", "days to death or last follow-up", 
        "death", "0= alive, 1= dead"
)

# Define a function for generating a clean table from the KM estimates
KM_table <- function(x){
        x |> # the survfit2() object
                ggsurvfit::tidy_survfit(times = seq(1000,7000,1000)) |> 
                dplyr::relocate(std.error, .after = conf.low) |> 
                dplyr::mutate(across(c(estimate:conf.low), ~round(.x,2))) |> 
                dplyr::mutate(std.error = round(std.error, 4)) |> 
                dplyr::select(-c(estimate_type:conf.level)) |> 
                flextable::flextable() |> 
                flextable::fontsize(size = 9, part = "all") |> 
                autofit() |> 
                flextable::theme_zebra()
}

# Define a function for generating the KM curves
KM_plot <- function(x, strataname = NULL){
        x |> 
                ggsurvfit()+
                add_censor_mark(size = 1.5, alpha = 0.8) +
                add_confidence_interval() +
                add_risktable(risktable_stats = c("n.risk", "cum.censor", "cum.event")) +
                add_quantile(y_value = 0.5, color = "gray50", linewidth = 0.5) +
                scale_ggsurvfit()+
                add_pvalue()+
                labs(title = "Relapse-free survival after surgery",
                     color = strataname,
                     fill = strataname
                )
}
```

# Inspect Rotterdam data
I went through the package's documentation for the dataset to also include the descriptions of the variables, and used a custom function to summarise the dataset:
```{r}
#| message: false
print(paste0("Number of patients analyzed: ", nrow(rotterdam)))
rotterdam |> 
        UEPtools::metadata_generator_any(variable_names = rotterdam_variables) |> 
        select(-Num_Values) |> 
        DT::datatable(
                filter = "top",
                options = list(
                        pageLength = 26
                ),
                rownames = FALSE, # set to FALSE for cleaner look
                class = 'cell-border stripe hover nowrap compact'
        )
```

## Process dataset for downstream analysis
Create new outcome variable `rd`, where 0= alive without relapse, 1= relapse or death.  
Also create `rd_time` variable where I calculate days to first of relapse, death or last follow-up
```{r}
rotterdam_cleaned <- rotterdam |> 
        mutate(
                # Convert several variables to factor
                meno = fct_recode(factor(meno), premenopausal = "0", postmenopausal = "1"),
                grade = factor(grade),
                hormon = fct_recode(factor(hormon), No = "0", Yes = "1"),
                chemo = fct_recode(factor(chemo), No = "0", Yes = "1"),
                
                # Add categorical variable for number of nodes
                nodes_cat = factor(
                        case_when(
                                nodes >0 & nodes <4 ~ "1-3",
                                nodes >= 4 & nodes < 9 ~ "4-9",
                                nodes >=9 ~ "9+"
                        )),
                
                # Add categorical variable for number of estrogen receptors
                er_cat = factor(
                        case_when(
                                er <41 ~ "0-40",
                                er >= 41 & er <301 ~ "41-300",
                                er >=301 ~ "301+"
                        ),levels = c("0-40", "41-300", "301+")),
                
                # Add categorical variable for number of progesterone receptors
                pgr_cat = factor(
                        case_when(
                                pgr <21 ~ "0-20",
                                pgr >= 21 & pgr <201 ~ "21-200",
                                pgr >=201 ~ "201+"
                        ),levels = c("0-20", "21-200", "201+")
                        ),
                
                # `rd` where 0= alive without relapse, 1= relapse or death
                rd = case_when(recur==1|death==1 ~ 1, .default = 0),
                # Calculate days to first of relapse, death or last follow-up
                rd_time = case_when(recur==1 ~ rtime, .default = dtime),
                # Add categorical age variable
                age_cat = factor(case_when( 
                        age < 65  ~ "24-64",
                        age >= 65   ~ "65+"))
        )

# Update the rotterdam_variables object
rotterdam_variables <- bind_rows(
        rotterdam_variables,
        tribble(
                ~name, ~value,
                "rd", "0= alive without relapse, 1= relapse or death",
                "rd_time", "days to relapse/death or last follow-up",
                "age_cat", "age category at surgery")
)
```

## Visualise the distribution of numeric variables
```{r}
#| message: false
p1 <- rotterdam_cleaned |> ggplot()+geom_histogram(aes(x=age))+labs(x="age at surgery")
p2 <- rotterdam_cleaned |> ggplot()+geom_bar(aes(x=size))+labs(x="tumor size")
p3 <- rotterdam_cleaned |> ggplot()+geom_histogram(aes(x=nodes))+labs(x="number of positive lymph nodes")
p4 <- rotterdam_cleaned |> ggplot()+geom_histogram(aes(x=pgr))+labs(x="progesterone receptors (fmol/l)")
p5 <- rotterdam_cleaned |> ggplot()+geom_histogram(aes(x=er))+labs(x="estrogen receptors (fmol/l)")
p6 <- rotterdam_cleaned |> ggplot()+geom_bar(aes(x=hormon))+labs(x="hormonal treatment")
p7 <- rotterdam_cleaned |> ggplot()+geom_bar(aes(x=meno))+labs(x="menopausal status")
p8 <- rotterdam_cleaned |> ggplot()+geom_histogram(aes(x=rd_time))+labs(x="days to relapse/death or last follow-up")

p1+p2+p3+p4+p5+p6+p7+p8+ plot_layout(ncol = 2)
```
# Analysis
## Kaplan-Meier curve
**Relapse-free survival probability at different timepoints:**
```{r}
# Fit a Surv-type object for right-censored data
rotterdam_surv_fit_rd <-  
        # survival::survfit(Surv(rd_time, rd) ~ 1, data = rotterdam_cleaned)
        # Using survfit2 from the ggsurvfit package allows easier control for 
        # downstream analysis using the ggsurvfit() function:
        ggsurvfit::survfit2(Surv(rd_time, rd) ~ 1, data = rotterdam_cleaned)
# Print its summary at specific times
rotterdam_surv_fit_rd |> KM_table()
```

**Restricted Mean Survival Time (RMST):**
Restricted Mean Survival Time (RMST) is a statistical measure used in survival analysis that offers a clinically meaningful way to compare survival outcomes between groups. It represents the average event-free survival time up to a pre-specified time point, and is defined as the area under the survival curve from time zero up to a specific, pre-defined time point. (using the `survival` package, I can only print the RMST for single groups or strata, but for more detailed comparisons between groups (e.g. getting the difference in RMST with confidence intervals) I could try more specialised packages, e.g. `survRM2`.

"The RMST may provide valuable information for comparing two survival curves when the proportional hazards assumption is not met, such as in cases of crossing or delayed separation of survival curves."  
-  Han K, Jung I. *Restricted Mean Survival Time for Survival Analysis: A Quick Guide for Clinical Researchers*. Korean J Radiol. 2022 May;23(5):495-499. doi: [10.3348/kjr.2022.0061](https://doi.org/10.3348/kjr.2022.0061)

**For this analysis, I've set the restriction time at 5 years (1,825 days):**
```{r}
print(rotterdam_surv_fit_rd, rmean = 365*5,  print.rmean = TRUE)
```

### Overall plot
```{r}
rotterdam_surv_fit_rd |> 
        ggsurvfit(color = "tomato")+
        add_censor_mark(color = "tomato", size = 1.5, alpha = 0.8) +
        add_confidence_interval(fill = "tomato") +
        add_risktable(risktable_stats = c("n.risk", "cum.censor", "cum.event")) +
        add_quantile(y_value = 0.5, color = "gray60", linewidth = 0.5) +
        scale_ggsurvfit()+
        labs(title = "Relapse-free survival after surgery")
```
### Group comparison: menopausal status (example)
**Survival probabilities:**
```{r}
rotterdam_surv_fit_meno <-  ggsurvfit::survfit2(Surv(rd_time, rd) ~ meno, data = rotterdam_cleaned)
rotterdam_surv_fit_meno |> KM_table() |> hline(7)
```

**Restricted Mean Survival Time:**
*Over 5 years (1825 days)*
```{r}
# Print mean survival time
print(rotterdam_surv_fit_meno, rmean = 365*5, print.rmean = TRUE)
```
*Over 10 years (3650 days)*
```{r}
# Print mean survival time
print(rotterdam_surv_fit_meno, rmean = 365*10, print.rmean = TRUE)
```

**KM curve:**
```{r}
rotterdam_surv_fit_meno |> KM_plot()
```
#### Log-rank test
Use a log-rank test, which accounts for the whole follow-up period. By comparing the observed number of events in each group with the number that would be expected if event rates were the same, a chi-squared test is used to determine if any observed differences are statistically meaningful.
```{r}
survdiff(Surv(rd_time, rd) ~ meno, rho = 0, data = rotterdam_cleaned)
```

## Regression modelling (CoxPH)

### Visually inspect individual KM curves for covariates
**Numeric covariates are categorized here only to aid visualisation**
```{r}
rotterdam_surv_fit_age_cat <-  survfit2(Surv(rd_time, rd) ~ age_cat, data = rotterdam_cleaned)
rotterdam_surv_fit_age_cat |> KM_plot(strataname = "Age category")

rotterdam_surv_fit_size <-  survfit2(Surv(rd_time, rd) ~ size, data = rotterdam_cleaned)
rotterdam_surv_fit_size |> KM_plot(strataname = "Tumor size")

rotterdam_surv_fit_hormon <-  survfit2(Surv(rd_time, rd) ~ hormon, data = rotterdam_cleaned)
rotterdam_surv_fit_hormon |> KM_plot(strataname = "Hormonal treatment")

rotterdam_surv_fit_nodes_cat <-  survfit2(Surv(rd_time, rd) ~ nodes_cat, data = rotterdam_cleaned)
rotterdam_surv_fit_nodes_cat |> KM_plot(strataname = "Number of nodes")

rotterdam_surv_fit_pgr_cat <-  survfit2(Surv(rd_time, rd) ~ pgr_cat, data = rotterdam_cleaned)
rotterdam_surv_fit_pgr_cat |> KM_plot(strataname = "progesterone receptors (fmol/l)")

rotterdam_surv_fit_er_cat <-  survfit2(Surv(rd_time, rd) ~ er_cat, data = rotterdam_cleaned)
rotterdam_surv_fit_er_cat |> KM_plot(strataname = "estrogen receptors (fmol/l)")
```

### Cox model specification
This is the full model using the variables specified in the original article (see section **"Prognostic factors"** above)
```{r}
rotterdam_cox <- 
        coxph(Surv(rd_time, rd) ~ age + meno + size + nodes + pgr + er + hormon,
              data = rotterdam_cleaned
        )
summary(rotterdam_cox)
```

#### Forest plot
```{r}
survminer::ggforest(rotterdam_cox, data = rotterdam_cleaned)
```

#### Assumptions: Proportional hazards
###### Schoenfeld residuals test:
-  For each covariate and globally, it tests the null hypothesis that the PH assumption holds (i.e., the slope of Schoenfeld residuals vs. time is zero).  
-  A small p-value (e.g. < 0.05) for a covariate suggests that the PH assumption is violated for that variable.  
-  The 'GLOBAL' test indicates if the assumption is violated for the overall model.
```{r}
rotterdam_test <- cox.zph(rotterdam_cox)
rotterdam_test
```
The 'GLOBAL' test appears to show that the PH assumption is violated for the overall model, and also appears to be violated for the age, size, nodes, and er variables.

###### Visual inspection of the test:
-  Plots the scaled Schoenfeld residuals against transformed time for each covariate.  
-  A non-horizontal line with a non-zero slope suggests a violation of the PH assumption.
```{r}
#| fig-height: 12
#| fig-width: 10
wrap_plots(survminer::ggcoxzph(rotterdam_test), ncol =2)
```
**While the results of the test of the proportional hazards assumption imply violation of the proportional hazards assumption, after visually inspecting the Schoenfeld residuals the validity of the assumption may still be argued to hold. Still, next steps may involve some combination of transformation of variables and/or consideration of including time-dependent interaction terms.**

We could additionally further explore comparing estimates of Restricted Mean Survival Time (RMST), e.g. see:  
Han K, Jung I. Restricted Mean Survival Time for Survival Analysis: A Quick Guide for Clinical Researchers. Korean J Radiol. 2022 May;23(5):495-499. doi: [10.3348/kjr.2022.0061](https://doi.org/10.3348/kjr.2022.0061)

"We conclude that the hazard ratio cannot be recommended as a general measure of the treatment effect in a randomized controlled trial, nor is it always appropriate when designing a trial. Restricted mean survival time may provide a practical way forward and deserves greater attention."  
-  Royston, P., Parmar, M.K. Restricted mean survival time: an alternative to the hazard ratio for the design and analysis of randomized trials with a time-to-event outcome. BMC Med Res Methodol 13, 152 (2013). <https://doi.org/10.1186/1471-2288-13-152>