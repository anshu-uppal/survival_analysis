---
title: "R coding to calculate standardised rates and ratios from cancer registry data"
author: "Anshu Uppal"
date: last-modified
format:
        html:
                code-fold: true
                toc: true
                toc-location: left  # Place TOC on the left side
                toc-depth: 5        # Include headers up to level 3 (###)
                toc-title: "On this page" # Custom title for the TOC
                smooth-scroll: true # Enable smooth scrolling
                embed-resources: true # Make the html file self contained
reference-location: margin
citation-location: margin
---

# Initial exploration and processing
I used the `rotterdam` dataset from the `survival` package, which includes 2982 primary breast cancers patients whose records were included in the Rotterdam tumor bank. 

This dataset includes the events relapse and death, and the origin of the follow-up time is the time of the primary surgery. The two events recorded are disease relapse and death, and follow-up time is provided for each. 

In the article from which this data stems, the authors restricted their dataset to the 1546 patients who had node-positive disease ("Since the validation dataset comprised only node-positive patients and nodal status is an important prognostic factor, we omitted the node-negative patients to create the derivation dataset.")  

See:  
Royston, P., Altman, D.G. External validation of a Cox prognostic model: principles and methods. BMC Med Res Methodol 13, 33 (2013). <https://doi.org/10.1186/1471-2288-13-33>

```{r}
#| context: setup
#| message: false
pacman::p_load(
        here,
        tidyverse,
        survival,
        survminer,
        ggsurvfit,
        janitor,
        DT,
        patchwork # easily combine plots
)

# Custom package with useful function for summarising dataframe
# pak::pak("UEP-HUG/UEPtools")

# Load in the rotterdam dataset from the survival package
# "The rotterdam data set includes 2982 primary breast cancers patients whose records were included in the Rotterdam tumor bank."
rotterdam <- survival::rotterdam
# Add in the variable description
rotterdam_variables <- tribble(
        ~name, ~value,
        "pid", "patient identifier", 
        "year", "year of surgery", 
        "age", "age at surgery", 
        "meno", "menopausal status (0= premenopausal, 1= postmenopausal)", 
        "size", "tumor size, a factor with levels <=20 20-50 >50", 
        "grade", "differentiation grade", 
        "nodes", "number of positive lymph nodes", 
        "pgr", "progesterone receptors (fmol/l)", 
        "er", "estrogen receptors (fmol/l)", 
        "hormon", "hormonal treatment (0=no, 1=yes)", 
        "chemo", "chemotherapy", 
        "rtime", "days to relapse or last follow-up", 
        "recur", "0= no relapse, 1= relapse", 
        "dtime", "days to death or last follow-up", 
        "death", "0= alive, 1= dead"
)
```

## Inspect Rotterdam data
I went through the package's documentation for the dataset to also include the descriptions of the variables, and used a custom function to summarise the dataset:
```{r}
rotterdam |> 
        UEPtools::metadata_generator_any(variable_names = rotterdam_variables) |> 
        select(-Num_Values) |> 
        DT::datatable(
                filter = "top",
                options = list(
                        pageLength = 26
                ),
                rownames = FALSE, # set to FALSE for cleaner look
                class = 'cell-border stripe hover nowrap compact'
        )
```

## Process dataset for downstream analysis
Create new outcome variable `status`, where 0= alive without recurrence, 1= recurrence or death.  
Also create `status_time` variable where I calculate days to first of reccurence, death or last follow-up
```{r}
rotterdam_cleaned <- rotterdam |> 
        # filter out node-negative patients
        filter(nodes > 0) |> # as "nodal status is an important prognostic factor, we omitted the node-negative patients to create the derivation dataset"
        mutate(
                # Convert several variables to factor
                meno = fct_recode(factor(meno), premenopausal = "0", postmenopausal = "1"),
                grade = factor(grade),
                hormon = fct_recode(factor(hormon), No = "0", Yes = "1"),
                chemo = fct_recode(factor(chemo), No = "0", Yes = "1"),
                
                # Add categorical variable for number of nodes
                nodes_cat = factor(
                        case_when(
                                nodes >0 & nodes <6 ~ "1-5",
                                nodes >= 6 & nodes < 11 ~ "6-10",
                                nodes >=11 ~ "11+"
                        ), 
                        levels = c("1-5", "6-10", "11+")),
                
                # `status` where 0= alive without relapse, 1= relapse or death
                status = case_when(recur==1|death==1 ~ 1, .default = 0),
                # Calculate days to first of relapse, death or last follow-up
                status_time = case_when(recur==1 ~ rtime, .default = dtime),
                # Add categorical age variable
                age_cat = factor(case_when( 
                        age < 65  ~ "24-64",
                        age >= 65   ~ "65+"))
        ) |> 
        droplevels()
# Update the rotterdam_variables object
rotterdam_variables <- bind_rows(
        rotterdam_variables,
        tribble(
                ~name, ~value,
                "status", "0= alive without relapse, 1= relapse or death",
                "status_time", "days to death/relapse or last follow-up",
                "age_cat", "age category at surgery")
)
```

## Visualise the distribution of numeric variables
```{r}
#| message: false
p1 <- rotterdam_cleaned |> ggplot()+geom_histogram(aes(x=age))+labs(x="age at surgery")
p2 <- rotterdam_cleaned |> ggplot()+geom_bar(aes(x=age_cat))+labs(x="age category at surgery")
p3 <- rotterdam_cleaned |> ggplot()+geom_histogram(aes(x=nodes))+labs(x="number of positive lymph nodes")
p4 <- rotterdam_cleaned |> ggplot()+geom_histogram(aes(x=pgr))+labs(x="progesterone receptors (fmol/l)")
p5 <- rotterdam_cleaned |> ggplot()+geom_histogram(aes(x=er))+labs(x="estrogen receptors (fmol/l)")
p6 <- rotterdam_cleaned |> ggplot()+geom_histogram(aes(x=rtime))+labs(x="days to relapse or last follow-up")
p7 <- rotterdam_cleaned |> ggplot()+geom_histogram(aes(x=dtime))+labs(x="days to death or last follow-up")
p8 <- rotterdam_cleaned |> ggplot()+geom_histogram(aes(x=status_time))+labs(x="days to death/relapse or last follow-up")

p1+p2+p3+p4+p5+p6+p7+p8+ plot_layout(ncol = 2)
```
# Analysis
## Event: death
### Kaplan-Meier curve
Survival probability at different timepoints
```{r}
# Fit a Surv-type object for right-censored data
rotterdam_surv_fit_d <-  
        # survival::survfit(Surv(dtime, death) ~ 1, data = rotterdam_cleaned)
        # Using survfit2 from the ggsurvfit package allows easier control for 
        # downstream analysis using the ggsurvfit() function:
        ggsurvfit::survfit2(Surv(dtime, death) ~ 1, data = rotterdam_cleaned)

# Print its summary at specific times
summary(rotterdam_surv_fit_d, times = seq(1000,7000,1000))
```

Mean survival time
```{r}
# Print mean survival time
# (** Explore deeper the restricted mean survival time (RMST), used often in cancer survival analysis)
print(rotterdam_surv_fit_d, print.rmean = TRUE)
```

#### Overall plot
```{r}
rotterdam_surv_fit_d |> 
        ggsurvfit(color = "tomato")+
        add_censor_mark(color = "tomato", size = 1.5, alpha = 0.8) +
        add_confidence_interval(fill = "tomato") +
        add_risktable(risktable_stats = c("n.risk", "cum.censor", "cum.event")) +
        add_quantile(y_value = 0.5, color = "gray60", linewidth = 0.5) +
        scale_ggsurvfit()+
        labs(title = "Overall survival after surgery")
```

```{r}
survminer::ggsurvplot(
        rotterdam_surv_fit_d, 
        data = rotterdam_cleaned,  # again specify the data used
        conf.int = TRUE,          
        surv.scale = "percent",    # present probabilities in the y axis in %
        break.time.by = 1000,   # time axis increments
        xlab = "Follow-up days",
        ylab = "Probability of survival",
        risk.table = T,                # print the risk table at bottom 
        # legend.title = "Gender",       # legend characteristics
        # legend.labs = c("Female","Male"),
        font.legend = 10, 
        # palette = "Dark2",             # specify color palette 
        surv.median.line = "hv",       # draw horizontal and vertical lines to the median survivals
        ggtheme = theme_light()        # simplify plot background
)
```

#### Comparison of survival curves
## By menopausal status
```{r}
rotterdam_surv_fit_meno <-  ggsurvfit::survfit2(Surv(dtime, death) ~ meno, data = rotterdam_cleaned)

summary(rotterdam_surv_fit_meno, times = seq(1000,7000,1000))
# Print mean survival time
# (** Explore deeper the restricted mean survival time (RMST), used often in cancer survival analysis)
print(rotterdam_surv_fit_meno, print.rmean = TRUE)
```

```{r}
rotterdam_surv_fit_meno |> 
        ggsurvfit()+
        add_censor_mark(size = 1.5, alpha = 0.8) +
        add_confidence_interval() +
        add_risktable(risktable_stats = c("n.risk", "cum.censor", "cum.event")) +
        add_quantile(y_value = 0.5, color = "gray50", linewidth = 0.5) +
        scale_ggsurvfit()+
        add_pvalue()
```


```{r}
survminer::ggsurvplot(
        rotterdam_surv_fit_meno, 
        data = rotterdam_cleaned,          # again specify the data used to fit linelistsurv_fit_sex 
        conf.int = TRUE,              # do not show confidence interval of KM estimates
        surv.scale = "percent",        # present probabilities in the y axis in %
        break.time.by = 1000,            # present the time axis with an increment of 10 days
        xlab = "Follow-up days",
        ylab = "Probability of survival",
        pval = T,                      # print p-value of Log-rank test 
        pval.coord = c(7000,.91),        # Location of p-value
        risk.table = T,                # print the risk table at bottom 
        legend.title = "Menopausal status",       # legend characteristics
        legend.labs = c("premenopausal","postmenopausal"),
        font.legend = 10, 
        # palette = "Dark2",             # specify color palette 
        surv.median.line = "hv",       # draw horizontal and vertical lines to the median survivals
        ggtheme = theme_light()        # simplify plot background
)
```

### Log-rank test
Use a log-rank test, which accounts for the whole follow-up period. By comparing the observed number of events in each group with the number that would be expected if event rates were the same, a chi-squared test is used to determine if any observed differences are statistically meaningful.
```{r}
survdiff(Surv(status_time, status) ~ meno, rho = 0, data = rotterdam_cleaned) 
```

## Regression modelling

### Visually inspect KM curves for each covariate
```{r}
rotterdam_surv_fit_age_cat <-  survfit(Surv(dtime, death) ~ age_cat, data = rotterdam_cleaned)
survminer::ggsurvplot(
        rotterdam_surv_fit_age_cat, 
        data = rotterdam_cleaned,          # again specify the data used to fit linelistsurv_fit_sex 
        conf.int = TRUE,              # do not show confidence interval of KM estimates
        surv.scale = "percent",        # present probabilities in the y axis in %
        break.time.by = 1000,            # present the time axis with an increment of 10 days
        xlab = "Follow-up days",
        ylab = "Probability of survival",
        legend.title = "Age at surgery",
        risk.table = T,                # print the risk table at bottom 
        ggtheme = theme_light()        # simplify plot background
)

rotterdam_surv_fit_size <-  survfit(Surv(dtime, death) ~ size, data = rotterdam_cleaned)
survminer::ggsurvplot(
        rotterdam_surv_fit_size, 
        data = rotterdam_cleaned,          # again specify the data used to fit linelistsurv_fit_sex 
        conf.int = TRUE,              # do not show confidence interval of KM estimates
        surv.scale = "percent",        # present probabilities in the y axis in %
        break.time.by = 1000,            # present the time axis with an increment of 10 days
        xlab = "Follow-up days",
        ylab = "Probability of survival",
        legend.title = "Tumor size",
        risk.table = T,                # print the risk table at bottom 
        ggtheme = theme_light()        # simplify plot background
)

rotterdam_surv_fit_grade <-  survfit(Surv(dtime, death) ~ grade, data = rotterdam_cleaned)
survminer::ggsurvplot(
        rotterdam_surv_fit_grade, 
        data = rotterdam_cleaned,          # again specify the data used to fit linelistsurv_fit_sex 
        conf.int = TRUE,              # do not show confidence interval of KM estimates
        surv.scale = "percent",        # present probabilities in the y axis in %
        break.time.by = 1000,            # present the time axis with an increment of 10 days
        xlab = "Follow-up days",
        ylab = "Probability of survival",
        legend.title = "Differentiation grade",
        risk.table = T,                # print the risk table at bottom 
        ggtheme = theme_light()        # simplify plot background
)

rotterdam_surv_fit_hormon <-  survfit(Surv(dtime, death) ~ hormon, data = rotterdam_cleaned)
survminer::ggsurvplot(
        rotterdam_surv_fit_hormon, 
        data = rotterdam_cleaned,          # again specify the data used to fit linelistsurv_fit_sex 
        conf.int = TRUE,              # do not show confidence interval of KM estimates
        surv.scale = "percent",        # present probabilities in the y axis in %
        break.time.by = 1000,            # present the time axis with an increment of 10 days
        xlab = "Follow-up days",
        ylab = "Probability of survival",
        legend.title = "Hormonal treatment",
        risk.table = T,                # print the risk table at bottom 
        ggtheme = theme_light()        # simplify plot background
)

rotterdam_surv_fit_nodes_cat <-  survfit(Surv(dtime, death) ~ nodes_cat, data = rotterdam_cleaned)
survminer::ggsurvplot(
        rotterdam_surv_fit_nodes_cat, 
        data = rotterdam_cleaned,          # again specify the data used to fit linelistsurv_fit_sex 
        conf.int = TRUE,              # do not show confidence interval of KM estimates
        surv.scale = "percent",        # present probabilities in the y axis in %
        break.time.by = 1000,            # present the time axis with an increment of 10 days
        xlab = "Follow-up days",
        ylab = "Probability of survival",
        legend.title = "Number of positive lymph nodes",
        risk.table = T,                # print the risk table at bottom 
        ggtheme = theme_light()        # simplify plot background
)

rotterdam_surv_fit_nodes_dich <-  survfit(Surv(dtime, death) ~ nodes_dich, data = rotterdam_cleaned)
survminer::ggsurvplot(
        rotterdam_surv_fit_nodes_dich, 
        data = rotterdam_cleaned,          # again specify the data used to fit linelistsurv_fit_sex 
        conf.int = TRUE,              # do not show confidence interval of KM estimates
        surv.scale = "percent",        # present probabilities in the y axis in %
        break.time.by = 1000,            # present the time axis with an increment of 10 days
        xlab = "Follow-up days",
        ylab = "Probability of survival",
        legend.title = "Number of positive lymph nodes (dichotomized)",
        risk.table = T,                # print the risk table at bottom 
        ggtheme = theme_light()        # simplify plot background
)
```

### Cox proportional hazards model
#### First model iteration
```{r}
rotterdam_cox <- 
        coxph(Surv(dtime, death) ~ meno + 
                      age + size + grade + hormon + nodes,
              data = rotterdam_cleaned
        )
summary(rotterdam_cox)

regcox <- coxph(Surv(dtime, death) ~ meno, data = rotterdam_cleaned)
cox.zph(regcox)
regfit <- survreg(Surv(dtime, death) ~ meno + age, data = rotterdam_cleaned)
summary(regcox)
summary(regfit)
```

##### Assumptions: Proportional hazards
###### Schoenfeld residuals test
-  For each covariate and globally, it tests the null hypothesis that the PH assumption holds (i.e., the slope of Schoenfeld residuals vs. time is zero).  
-  A small p-value (e.g. < 0.05) for a covariate suggests that the PH assumption is violated for that variable.  
-  The 'GLOBAL' test indicates if the assumption is violated for the overall model.
```{r}
rotterdam_test <- cox.zph(rotterdam_cox)
rotterdam_test
```
The 'GLOBAL' test appears to show that the assumption is violated for the overall model, and the meno and nodes variables might need some transformation.

###### Visual inspection of the test
-  Plots the scaled Schoenfeld residuals against transformed time for each covariate.  
-  A non-horizontal line with a non-zero slope suggests a violation of the PH assumption.

```{r}
#| fig-height: 12
survminer::ggcoxzph(rotterdam_test)
# Deviance residuals: look for outliers or influential data points. 
# ggcoxdiagnostics(rotterdam_cox, type = "dfbeta", 
#                  linear.predictions = FALSE, ggtheme = theme_bw())
survminer::ggcoxdiagnostics(rotterdam_cox, type = "schoenfeld")
res.cox <- coxph(Surv(dtime, death) ~ age + log(age), data = rotterdam_cleaned)
survminer::ggcoxfunctional(res.cox)

```

#### Second model iteration
Add variables for time-interaction terms to the dataset, then include those in an updated model
```{r}
rotterdam_cleaned$nodes_log_time <- rotterdam_cleaned$nodes*log(rotterdam_cleaned$dtime+0.1)
rotterdam_cox2 <- 
        coxph(Surv(dtime, death) ~ meno + 
                      size + grade + hormon + nodes + 
                      tt(nodes), # time-dependent interaction for nodes variable
              data = rotterdam_cleaned
        )
summary(rotterdam_cox2)
rotterdam_cox3 <- 
        coxph(Surv(dtime, death) ~ meno + 
                      size + grade + hormon + nodes + 
                      tt(nodes), # time-dependent interaction for nodes variable
              tt = function(x, t, ...){ x * log(t)},
              data = rotterdam_cleaned
        )
summary(rotterdam_cox3)
rotterdam_test2 <- cox.zph(rotterdam_cox2)
rotterdam_test2
```



# Forest plots ####
```{r}
survminer::ggforest(rotterdam_cox, data = rotterdam_cleaned)
```
