[
  {
    "objectID": "survival_analysis.html",
    "href": "survival_analysis.html",
    "title": "A worked basic example of a survival analysis in R",
    "section": "",
    "text": "Code\n/* set DT table fontsizes */\nth { font-size: 11px; } /* header font */\ntd { font-size: 11px; } /* cell font */"
  },
  {
    "objectID": "survival_analysis.html#prognostic-factors",
    "href": "survival_analysis.html#prognostic-factors",
    "title": "A worked basic example of a survival analysis in R",
    "section": "Prognostic factors",
    "text": "Prognostic factors\nQuoted paragraph from the article:\n“Candidate prognostic variables in the breast cancer datasets were age at primary surgery (age, years), menopausal status (meno, 0 = premenopausal, 1 = postmenopausal), tumour size (size), tumour grade (grade), number of positive lymph nodes (nodes), progesterone receptors (pgr, fmol/l), oestrogen receptors (er, fmol/l), hormonal treatment (hormon, 0 = no, 1 = yes), and chemotherapy (chemo). Tumour size (mm) was not available as a continuous variable in the Rotterdam dataset, therefore a standard coding was used; the base category was ≤ 20 mm and two dummy variables were used, namely 20 to 50 mm (sized1) and &gt; 50 mm (sized2). We excluded grade, since it was measured according to a different protocol in the two datasets, and chemo, since all patients in the validation dataset received chemotherapy.”\n\n\nCode\n# install.packages(\"pacman\")\npacman::p_load(\n        here,\n        tidyverse,\n        survival,\n        survminer,\n        ggsurvfit,\n        janitor,\n        DT,\n        patchwork # easily combine plots\n)\n\n# Custom package with useful function for summarising dataframe\n# pak::pak(\"UEP-HUG/UEPtools\")\n\n# Load in the rotterdam dataset from the survival package\nrotterdam &lt;- survival::rotterdam |&gt; \n        # filter out node-negative patients\n        filter(nodes &gt; 0) # as \"nodal status is an important prognostic factor, we omitted the node-negative patients to create the derivation dataset\"\n\n# Add in the variable description\nrotterdam_variables &lt;- tribble(\n        ~name, ~value,\n        \"pid\", \"patient identifier\", \n        \"year\", \"year of surgery\", \n        \"age\", \"age at surgery\", \n        \"meno\", \"menopausal status (0= premenopausal, 1= postmenopausal)\", \n        \"size\", \"tumor size, a factor with levels &lt;=20, 20-50, &gt;50\", \n        \"grade\", \"differentiation grade\", \n        \"nodes\", \"number of positive lymph nodes\", \n        \"pgr\", \"progesterone receptors (fmol/l)\", \n        \"er\", \"estrogen receptors (fmol/l)\", \n        \"hormon\", \"hormonal treatment (0=no, 1=yes)\", \n        \"chemo\", \"chemotherapy\", \n        \"rtime\", \"days to relapse or last follow-up\", \n        \"recur\", \"0= no relapse, 1= relapse\", \n        \"dtime\", \"days to death or last follow-up\", \n        \"death\", \"0= alive, 1= dead\"\n)"
  },
  {
    "objectID": "survival_analysis.html#process-dataset-for-downstream-analysis",
    "href": "survival_analysis.html#process-dataset-for-downstream-analysis",
    "title": "A worked basic example of a survival analysis in R",
    "section": "Process dataset for downstream analysis",
    "text": "Process dataset for downstream analysis\nCreate new outcome variable rd, where 0= alive without relapse, 1= relapse or death.\nAlso create rd_time variable where I calculate days to first of relapse, death or last follow-up\n\n\nCode\nrotterdam_cleaned &lt;- rotterdam |&gt; \n        mutate(\n                # Convert several variables to factor\n                meno = fct_recode(factor(meno), premenopausal = \"0\", postmenopausal = \"1\"),\n                grade = factor(grade),\n                hormon = fct_recode(factor(hormon), No = \"0\", Yes = \"1\"),\n                chemo = fct_recode(factor(chemo), No = \"0\", Yes = \"1\"),\n                \n                # Add categorical variable for number of nodes\n                nodes_cat = factor(\n                        case_when(\n                                nodes &gt;0 & nodes &lt;4 ~ \"1-3\",\n                                nodes &gt;= 4 & nodes &lt; 9 ~ \"4-9\",\n                                nodes &gt;=9 ~ \"9+\"\n                        )),\n                \n                # `rd` where 0= alive without relapse, 1= relapse or death\n                rd = case_when(recur==1|death==1 ~ 1, .default = 0),\n                # Calculate days to first of relapse, death or last follow-up\n                rd_time = case_when(recur==1 ~ rtime, .default = dtime),\n                # Add categorical age variable\n                age_cat = factor(case_when( \n                        age &lt; 65  ~ \"24-64\",\n                        age &gt;= 65   ~ \"65+\"))\n        )\n\n# Update the rotterdam_variables object\nrotterdam_variables &lt;- bind_rows(\n        rotterdam_variables,\n        tribble(\n                ~name, ~value,\n                \"rd\", \"0= alive without relapse, 1= relapse or death\",\n                \"rd_time\", \"days to relapse/death or last follow-up\",\n                \"age_cat\", \"age category at surgery\")\n)"
  },
  {
    "objectID": "survival_analysis.html#visualise-the-distribution-of-numeric-variables",
    "href": "survival_analysis.html#visualise-the-distribution-of-numeric-variables",
    "title": "A worked basic example of a survival analysis in R",
    "section": "Visualise the distribution of numeric variables",
    "text": "Visualise the distribution of numeric variables\n\n\nCode\np1 &lt;- rotterdam_cleaned |&gt; ggplot()+geom_histogram(aes(x=age))+labs(x=\"age at surgery\")\np2 &lt;- rotterdam_cleaned |&gt; ggplot()+geom_bar(aes(x=size))+labs(x=\"tumor size\")\np3 &lt;- rotterdam_cleaned |&gt; ggplot()+geom_histogram(aes(x=nodes))+labs(x=\"number of positive lymph nodes\")\np4 &lt;- rotterdam_cleaned |&gt; ggplot()+geom_histogram(aes(x=pgr))+labs(x=\"progesterone receptors (fmol/l)\")\np5 &lt;- rotterdam_cleaned |&gt; ggplot()+geom_histogram(aes(x=er))+labs(x=\"estrogen receptors (fmol/l)\")\np6 &lt;- rotterdam_cleaned |&gt; ggplot()+geom_bar(aes(x=hormon))+labs(x=\"hormonal treatment\")\np7 &lt;- rotterdam_cleaned |&gt; ggplot()+geom_bar(aes(x=meno))+labs(x=\"menopausal status\")\np8 &lt;- rotterdam_cleaned |&gt; ggplot()+geom_histogram(aes(x=rd_time))+labs(x=\"days to relapse/death or last follow-up\")\n\np1+p2+p3+p4+p5+p6+p7+p8+ plot_layout(ncol = 2)"
  },
  {
    "objectID": "survival_analysis.html#kaplan-meier-curve",
    "href": "survival_analysis.html#kaplan-meier-curve",
    "title": "A worked basic example of a survival analysis in R",
    "section": "Kaplan-Meier curve",
    "text": "Kaplan-Meier curve\nRelapse-free survival probability at different timepoints:\n\n\nCode\n# Fit a Surv-type object for right-censored data\nrotterdam_surv_fit_rd &lt;-  \n        # survival::survfit(Surv(rd_time, rd) ~ 1, data = rotterdam_cleaned)\n        # Using survfit2 from the ggsurvfit package allows easier control for \n        # downstream analysis using the ggsurvfit() function:\n        ggsurvfit::survfit2(Surv(rd_time, rd) ~ 1, data = rotterdam_cleaned)\n\n# Print its summary at specific times\nsummary(rotterdam_surv_fit_rd, times = seq(1000,7000,1000))\n\n\nCall: survfit(formula = Surv(rd_time, rd) ~ 1, data = rotterdam_cleaned)\n\n time n.risk n.event survival std.err lower 95% CI upper 95% CI\n 1000    928     608    0.606  0.0124       0.5819        0.631\n 2000    573     289    0.413  0.0127       0.3889        0.439\n 3000    321     105    0.327  0.0125       0.3033        0.353\n 4000    112      62    0.243  0.0133       0.2183        0.271\n 5000     24      14    0.186  0.0180       0.1538        0.225\n 6000      3       2    0.144  0.0316       0.0936        0.221\n 7000      1       0    0.144  0.0316       0.0936        0.221\n\n\nMean survival time:\n\n\nCode\nprint(rotterdam_surv_fit_rd, print.rmean = TRUE)\n\n\nCall: survfit(formula = Surv(rd_time, rd) ~ 1, data = rotterdam_cleaned)\n\n        n events rmean* se(rmean) median 0.95LCL 0.95UCL\n[1,] 1546   1080   2485        79   1441    1301    1583\n    * restricted mean with upper limit =  7027 \n\n\n\nOverall plot\n\n\nCode\nrotterdam_surv_fit_rd |&gt; \n        ggsurvfit(color = \"tomato\")+\n        add_censor_mark(color = \"tomato\", size = 1.5, alpha = 0.8) +\n        add_confidence_interval(fill = \"tomato\") +\n        add_risktable(risktable_stats = c(\"n.risk\", \"cum.censor\", \"cum.event\")) +\n        add_quantile(y_value = 0.5, color = \"gray60\", linewidth = 0.5) +\n        scale_ggsurvfit()+\n        labs(title = \"Relapse-free survival after surgery\")\n\n\n\n\n\n\n\n\n\n\n\nGroup comparison: menopausal status (example)\nSurvival probabilities:\n\n\nCode\nrotterdam_surv_fit_meno &lt;-  ggsurvfit::survfit2(Surv(rd_time, rd) ~ meno, data = rotterdam_cleaned)\n\nsummary(rotterdam_surv_fit_meno, times = seq(1000,7000,1000))\n\n\nCall: survfit(formula = Surv(rd_time, rd) ~ meno, data = rotterdam_cleaned)\n\n                meno=premenopausal \n time n.risk n.event survival std.err lower 95% CI upper 95% CI\n 1000    404     222    0.646  0.0191        0.610        0.684\n 2000    268     108    0.469  0.0201        0.432        0.511\n 3000    159      37    0.395  0.0203        0.357        0.437\n 4000     61      25    0.316  0.0218        0.276        0.362\n 5000     17       3    0.280  0.0281        0.230        0.341\n 6000      2       1    0.257  0.0341        0.198        0.333\n 7000      1       0    0.257  0.0341        0.198        0.333\n\n                meno=postmenopausal \n time n.risk n.event survival std.err lower 95% CI upper 95% CI\n 1000    524     386   0.5783  0.0163       0.5472        0.611\n 2000    305     181   0.3740  0.0162       0.3436        0.407\n 3000    162      68   0.2799  0.0157       0.2508        0.312\n 4000     51      37   0.1929  0.0164       0.1634        0.228\n 5000      7      11   0.1191  0.0226       0.0821        0.173\n 6000      1       1   0.0596  0.0436       0.0142        0.250\n\n\nMean survival time:\n\n\nCode\n# Print mean survival time\nprint(rotterdam_surv_fit_meno, print.rmean = TRUE)\n\n\nCall: survfit(formula = Surv(rd_time, rd) ~ meno, data = rotterdam_cleaned)\n\n                      n events rmean* se(rmean) median 0.95LCL 0.95UCL\nmeno=premenopausal  628    396   2991     125.8   1749    1510    2141\nmeno=postmenopausal 918    684   2130      93.6   1275    1172    1442\n    * restricted mean with upper limit =  7027 \n\n\nKM curve:\n\n\nCode\nrotterdam_surv_fit_meno |&gt; \n        ggsurvfit()+\n        add_censor_mark(size = 1.5, alpha = 0.8) +\n        add_confidence_interval() +\n        add_risktable(risktable_stats = c(\"n.risk\", \"cum.censor\", \"cum.event\")) +\n        add_quantile(y_value = 0.5, color = \"gray50\", linewidth = 0.5) +\n        scale_ggsurvfit()+\n        add_pvalue()+\n        labs(title = \"Relapse-free survival after surgery\")\n\n\n\n\n\n\n\n\n\n\nLog-rank test\nUse a log-rank test, which accounts for the whole follow-up period. By comparing the observed number of events in each group with the number that would be expected if event rates were the same, a chi-squared test is used to determine if any observed differences are statistically meaningful.\n\n\nCode\nsurvdiff(Surv(rd_time, rd) ~ meno, rho = 0, data = rotterdam_cleaned) \n\n\nCall:\nsurvdiff(formula = Surv(rd_time, rd) ~ meno, data = rotterdam_cleaned, \n    rho = 0)\n\n                      N Observed Expected (O-E)^2/E (O-E)^2/V\nmeno=premenopausal  628      396      479      14.4        26\nmeno=postmenopausal 918      684      601      11.5        26\n\n Chisq= 26  on 1 degrees of freedom, p= 3e-07"
  },
  {
    "objectID": "survival_analysis.html#regression-modelling-coxph",
    "href": "survival_analysis.html#regression-modelling-coxph",
    "title": "A worked basic example of a survival analysis in R",
    "section": "Regression modelling (CoxPH)",
    "text": "Regression modelling (CoxPH)\n\nVisually inspect individual KM curves for covariates\n\n\nCode\nrotterdam_surv_fit_age_cat &lt;-  survfit2(Surv(rd_time, rd) ~ age_cat, data = rotterdam_cleaned)\nrotterdam_surv_fit_age_cat |&gt; \n        ggsurvfit()+\n        add_censor_mark(size = 1.5, alpha = 0.8) +\n        add_confidence_interval() +\n        add_risktable(risktable_stats = c(\"n.risk\", \"cum.censor\", \"cum.event\")) +\n        add_quantile(y_value = 0.5, color = \"gray50\", linewidth = 0.5) +\n        scale_ggsurvfit()+\n        add_pvalue()+\n        labs(title = \"Relapse-free survival after surgery\")\n\n\n\n\n\n\n\n\n\nCode\nrotterdam_surv_fit_size &lt;-  survfit2(Surv(rd_time, rd) ~ size, data = rotterdam_cleaned)\nrotterdam_surv_fit_size |&gt; \n        ggsurvfit()+\n        add_censor_mark(size = 1.5, alpha = 0.8) +\n        add_confidence_interval() +\n        add_risktable(risktable_stats = c(\"n.risk\", \"cum.censor\", \"cum.event\")) +\n        add_quantile(y_value = 0.5, color = \"gray50\", linewidth = 0.5) +\n        scale_ggsurvfit()+\n        add_pvalue()+\n        labs(title = \"Relapse-free survival after surgery\")\n\n\n\n\n\n\n\n\n\nCode\nrotterdam_surv_fit_hormon &lt;-  survfit2(Surv(rd_time, rd) ~ hormon, data = rotterdam_cleaned)\nrotterdam_surv_fit_hormon |&gt; \n        ggsurvfit()+\n        add_censor_mark(size = 1.5, alpha = 0.8) +\n        add_confidence_interval() +\n        add_risktable(risktable_stats = c(\"n.risk\", \"cum.censor\", \"cum.event\")) +\n        add_quantile(y_value = 0.5, color = \"gray50\", linewidth = 0.5) +\n        scale_ggsurvfit()+\n        add_pvalue()+\n        labs(title = \"Relapse-free survival after surgery\")\n\n\n\n\n\n\n\n\n\nCode\nrotterdam_surv_fit_nodes_cat &lt;-  survfit2(Surv(rd_time, rd) ~ nodes_cat, data = rotterdam_cleaned)\nrotterdam_surv_fit_nodes_cat |&gt; \n        ggsurvfit()+\n        add_censor_mark(size = 1.5, alpha = 0.8) +\n        add_confidence_interval() +\n        add_risktable(risktable_stats = c(\"n.risk\", \"cum.censor\", \"cum.event\")) +\n        add_quantile(y_value = 0.5, color = \"gray50\", linewidth = 0.5) +\n        scale_ggsurvfit()+\n        add_pvalue()+\n        labs(title = \"Relapse-free survival after surgery\")\n\n\n\n\n\n\n\n\n\n\n\nCox model specification\nThis is the full model using the variables specified in the original article (see section “Prognostic factors” above)\n\n\nCode\nrotterdam_cox &lt;- \n        coxph(Surv(rd_time, rd) ~ age + meno + size + nodes + pgr + er + hormon,\n              data = rotterdam_cleaned\n        )\nsummary(rotterdam_cox)\n\n\nCall:\ncoxph(formula = Surv(rd_time, rd) ~ age + meno + size + nodes + \n    pgr + er + hormon, data = rotterdam_cleaned)\n\n  n= 1546, number of events= 1080 \n\n                         coef  exp(coef)   se(coef)      z Pr(&gt;|z|)    \nage                 0.0045330  1.0045433  0.0039914  1.136  0.25608    \nmenopostmenopausal  0.2418071  1.2735485  0.1065947  2.268  0.02330 *  \nsize20-50           0.2855600  1.3305069  0.0738251  3.868  0.00011 ***\nsize&gt;50             0.6124397  1.8449269  0.0941898  6.502 7.92e-11 ***\nnodes               0.0558619  1.0574516  0.0052392 10.662  &lt; 2e-16 ***\npgr                -0.0002002  0.9997998  0.0001237 -1.618  0.10560    \ner                 -0.0002603  0.9997398  0.0001250 -2.082  0.03733 *  \nhormonYes          -0.3228457  0.7240856  0.0809431 -3.989 6.65e-05 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n                   exp(coef) exp(-coef) lower .95 upper .95\nage                   1.0045     0.9955    0.9967    1.0124\nmenopostmenopausal    1.2735     0.7852    1.0334    1.5695\nsize20-50             1.3305     0.7516    1.1513    1.5376\nsize&gt;50               1.8449     0.5420    1.5339    2.2190\nnodes                 1.0575     0.9457    1.0466    1.0684\npgr                   0.9998     1.0002    0.9996    1.0000\ner                    0.9997     1.0003    0.9995    1.0000\nhormonYes             0.7241     1.3811    0.6179    0.8486\n\nConcordance= 0.66  (se = 0.008 )\nLikelihood ratio test= 235.5  on 8 df,   p=&lt;2e-16\nWald test            = 266.1  on 8 df,   p=&lt;2e-16\nScore (logrank) test = 277.2  on 8 df,   p=&lt;2e-16\n\n\n\nForest plot\n\n\nCode\nsurvminer::ggforest(rotterdam_cox, data = rotterdam_cleaned)\n\n\n\n\n\n\n\n\n\n\n\nAssumptions: Proportional hazards\n\nSchoenfeld residuals test:\n\nFor each covariate and globally, it tests the null hypothesis that the PH assumption holds (i.e., the slope of Schoenfeld residuals vs. time is zero).\n\nA small p-value (e.g. &lt; 0.05) for a covariate suggests that the PH assumption is violated for that variable.\n\nThe ‘GLOBAL’ test indicates if the assumption is violated for the overall model.\n\n\n\nCode\nrotterdam_test &lt;- cox.zph(rotterdam_cox)\nrotterdam_test\n\n\n          chisq df       p\nage     4.05333  1 0.04408\nmeno    0.00248  1 0.96026\nsize   13.17300  2 0.00138\nnodes   6.73579  1 0.00945\npgr    15.02219  1 0.00011\ner     24.55857  1 7.2e-07\nhormon  2.99857  1 0.08334\nGLOBAL 61.45472  8 2.4e-10\n\n\nThe ‘GLOBAL’ test appears to show that the PH assumption is violated for the overall model, and also appears to be violated for the age, size, nodes, and er variables.\n\n\nVisual inspection of the test:\n\nPlots the scaled Schoenfeld residuals against transformed time for each covariate.\n\nA non-horizontal line with a non-zero slope suggests a violation of the PH assumption.\n\n\n\nCode\nwrap_plots(survminer::ggcoxzph(rotterdam_test), ncol =2)\n\n\n\n\n\n\n\n\n\nWhile the results of the test of the proportional hazards assumption imply violation of the proportional hazards assumption, after visually inspecting the Schoenfeld residuals the validity of the assumption may still be argued to hold. Still, next steps may involve some combination of transformation of variables and/or consideration of including time-dependent interaction terms."
  }
]